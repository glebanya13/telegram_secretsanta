const functions = require('firebase-functions');
const admin = require('firebase-admin');
admin.initializeApp();
const { Firestore } = require('@google-cloud/firestore');
const { Telegraf } = require('telegraf');
const Markup = require('telegraf/markup');
const session = require('telegraf/session')

const firestore = new Firestore();

// config
const bot = new Telegraf("1493834992:AAFQetYA4bgRS_frO1glgBIoSyZXTRuRywQ");
bot.use(Telegraf.log())
bot.use(session())

const start_kb = Markup.inlineKeyboard(
	[
		Markup.callbackButton('–î–∞, —Ö–æ—á—É!', 'registerMe'),
		Markup.callbackButton('–ù–µ—Ç, –ø–æ–∫–∞ –ø–æ–¥—É–º–∞—é.', 'notRegisterMe')
	]
)
// start bot
bot.start((ctx) => {
	var config = functions.config()
	if (config && config.game) {
		// it works
		// to set game start firebase functions:config:set game.state="started"
		//ctx.reply(config)
	}
	const welcomMsg = "}{–≤–∞–ª–∞ –•—Ä—ã—Å—Ç—É!"

		+ `\n–ü—Ä–∏–≤–µ—Ç, ${ctx.message.from.first_name} ${ctx.message.from.last_name}!`
		+ "\n–Ø üëº —Ç–∞–π–Ω—ã–π —Å–∞–Ω—Ç–∞–±–æ—Ç!"
		+ "\n–ú—ã –∏–≥—Ä–∞–µ–º –≤ Secret Santa. –≠—Ç–æ –ø—Ä–æ—Å—Ç–æ! –°—Ä–∞–∑—É —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Ç—Å—è –≤—Å–µ, –∫—Ç–æ —Ö–æ—Ç—è—Ç —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å.\n"
		+ "<i>–ó–∞–∫—Ä—ã—Ç–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ <b>18 –¥–µ–∫–∞–±—Ä—è</b></i> \n"
		+ "–ß–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π, –∫–æ–≥–¥–∞ –≤—Å–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å, –∫–∏–±–µ—Ä–≤–æ–ª—à–µ–±—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–±–µ –ø–∞—Ä—É. \n"
		+ "<b>–¢—ã –ø–æ–ª—É—á–∞–µ—à—å –ò–º—è —á–µ–ª–æ–≤–µ–∫–∞, –¥–ª—è –∫–æ–≥–æ —Ç—ã –±—É–¥–µ—à—å –°–∞–Ω—Ç–æ–π. </b>\n"
		+ "–ù–∞–¥–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –Ω–µ–±–æ–ª—å—à–æ–π –ø–æ–¥–∞—Ä–æ–∫ (—Å–∫–∞–∂–µ–º, —Ü–µ–Ω–æ–π –¥–æ 10 —Ä—É–±). –ó–∞–ø–∞–∫–æ–≤–∞—Ç—å, –ø–æ–¥–ø–∏—Å–∞—Ç—å –∏ –ø—Ä–∏–Ω–µ—Å—Ç–∏ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ –º–µ—Å—Ç–æ <i>–¥–æ 22 –¥–µ–∫–∞–±—Ä—è.</i>\n"
		+ "–ú–µ—Å—Ç–æ –∏ –¥–∞—Ç—É —Ç—ã –ø–æ–ª—É—á–∏—à—å –ø–æ–∑–∂–µ."
		+ "\n–•–æ—á–µ—à—å –±—ã—Ç—å —Ç–∞–π–Ω—ã–º —Å–∞–Ω—Ç–æ–π? –¢—ã —Å –Ω–∞–º–∏?"
	ctx.replyWithHTML(welcomMsg, start_kb.extra())
	loadPlayers(ctx)
})


bot.action('registerMe', (ctx) => {
	ctx.reply('üôÉü•≥üôÉü•≥\n–ú–æ–º–µ–Ω—Ç...')
	return registerMe(ctx, () => {
		let from = ctx.update.callback_query.from
		ctx.reply(`${from.first_name} ${from.last_name || ""},\n üëº —Ä–∞–¥, —á—Ç–æ —Ç—ã —Å –Ω–∞–º–∏!\n –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã?`,
			Markup.keyboard([
				['–ö–æ–≥–æ –ø–æ–∑–¥—Ä–∞–≤–∏—Ç—å?', '–ö—É–¥–∞ –ø—Ä–∏–Ω–µ—Å—Ç–∏?'],
				['–ö–æ–≥–¥–∞ –ø—Ä–∏–Ω–µ—Å—Ç–∏?', '–ö—Ç–æ –µ—â–µ –∑–¥–µ—Å—å?'],
				['–ü–æ–∫–∏–Ω—É—Ç—å –∏–≥—Ä—É']
			])
				.resize()
				.extra());
	}, true) // is participant = true
})


const leave_kb = Markup.inlineKeyboard(
	[
		Markup.callbackButton('–î–∞, —è —É—Ö–æ–∂—É!', 'notRegisterMe')
	]
)

bot.on('text', (ctx, next) => {
	switch (ctx.message.text) {
		case '–ö–æ–≥–æ –ø–æ–∑–¥—Ä–∞–≤–∏—Ç—å?':
			ctx.reply('–ú–∏–Ω—É—Ç–æ—á–∫—É...')
			whoIsMyTarget(ctx)
			break;
		case '–ö—É–¥–∞ –ø—Ä–∏–Ω–µ—Å—Ç–∏?':
			ctx.reply("–ü–æ–∫–∞ –Ω–µ –∑–Ω–∞—é.")
			ctx.replyWithHTML('–ù–∞–¥–æ –∫—É–ø–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ (–Ω–µ–¥–æ—Ä–æ–≥–æ–π, –¥–æ–ø—É—Å—Ç–∏–º –¥–æ 10 —Ä—É–±). –ú–µ—Å—Ç–æ —Å–±–æ—Ä–∞ –ø–æ–¥–∞—Ä–∫–æ–≤ —Å–∫–∞–∂—É –ø–æ–∑–∂–µ.')
			break;
		case '–ö–æ–≥–¥–∞ –ø—Ä–∏–Ω–µ—Å—Ç–∏?':
			ctx.replyWithHTML('–ù–∞–¥–æ –∫—É–ø–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ (–Ω–µ–¥–æ—Ä–æ–≥–æ–π, –¥–æ–ø—É—Å—Ç–∏–º –¥–æ 10 —Ä—É–±). <i>–ö—Ä–∞—Å–∏–≤–æ</i> —É–ø–∞–∫–æ–≤–∞—Ç—å –∏ <i>–ø–æ–¥–ø–∏—Å–∞—Ç—å</i>. \n<b>–î–æ 22 –¥–µ–∫–∞–±—Ä—è</b> –ø–æ–¥–∞—Ä–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≥–æ—Ç–æ–≤. –ú–µ—Å—Ç–æ —Å–±–æ—Ä–∞ –ø–æ–¥–∞—Ä–∫–æ–≤ –±—É–¥–µ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ –ø–æ–∑–∂–µ.')
			break;
		case '–ü–æ–∫–∏–Ω—É—Ç—å –∏–≥—Ä—É':
			ctx.reply('–¢—ã —É–≤–µ—Ä–µ–Ω?', leave_kb.extra())
			break;
		case '–ö—Ç–æ –µ—â–µ –∑–¥–µ—Å—å?':
			ctx.reply('–ù–∞—Å –º–Ω–æ–≥–æ!')
			listPlayers(ctx)
			break;
		case '–ü–æ–∫–∞':
			ctx.reply('–ë–∞–π-–±–∞–π!')
			break;
		case '–í–µ—Ä–Ω—É—Ç—å—Å—è!':
			ctx.reply('–ó–∞–ø—É—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É /start')
			break;
	}
	return next()
})

bot.action('notRegisterMe', (ctx) => {
	ctx.reply('Oh! üò¢üò¢üò¢')
	return registerMe(ctx, () => {
		let from = ctx.update.callback_query.from
		ctx.reply(`${from.first_name} ${from.last_name || ""},\n üëº —Ç–∞–∫ –∂–∞–ª—å —á—Ç–æ —Ç—ã –Ω–µ —Å –Ω–∞–º–∏!`,
			Markup.keyboard([
				['–ü–æ–∫–∞', '–í–µ—Ä–Ω—É—Ç—å—Å—è!']
			])
				.resize()
				.extra());
	},
		false) // is not participant
})

const adminList = [
	'572193621', // gleb
	'935549446'	 // eshymanovich
]

// start game
bot.command('game', (ctx, next) => {
	trace(ctx)

	if (adminList.indexOf(ctx.message.from.id.toString()) !== -1) { // this is my id
		//	game = true
		ctx.reply('–ò–¥—ë—Ç –ø–æ–¥–±–æ—Ä –∏–≥—Ä–æ–∫–æ–≤...')
		return generateTargets(ctx, next)
	} else {
		ctx.reply(`${ctx.message.from.first_name}, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É`)
	}
	return next()
})

bot.command('hello', ctx => ctx.reply('hello')) // test comand - hello
bot.command('getaphotos', (ctx, next) => { // GetAllPhotos command 
	ctx.reply('working to find all photos')
	return showPhotos(ctx, next)
})
bot.command('help', ctx => ctx.reply("–ü—Ä–∏–≤–µ—Ç üëº! \n–í—Å–µ –ø—Ä–æ—Å—Ç–æ. \n/start - –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è. \n–ö–∞–∫ —Ç–æ–ª—å–∫–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è - –ø–æ—è–≤—è—Ç—Å—è –∫–Ω–æ–ø–∫–∏. –í–æ—Ç –∏ –≤—Å–µ."))
//stop game
bot.command('stop', (ctx) => {
	if ('572193621' === ctx.message.from.id) { // this is my id
		ctx.reply('–ü–æ–¥–±–æ—Ä –∏–≥—Ä–æ–∫–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω:(')
	} else {
		ctx.reply(`${ctx.message.from.first_name}, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É`)
	}
});

bot.on('text', (ctx) => {
	trace(ctx);
});

bot.launch();


exports.stanta = functions.https.onRequest(
	(req, res) => bot.handleUpdate(req.body, res)
)
//bot.telegram.setWebhook(`https://us-central1-secretsanta-234fc.cloudfunctions.net/stanta/AAFQetYA4bgRS`);
// https://api.telegram.org/bot1493834992:AAFQetYA4bgRS_frO1glgBIoSyZXTRuRywQ/getMe
// https://api.telegram.org/bot1493834992:AAFQetYA4bgRS_frO1glgBIoSyZXTRuRywQ/setWebhook?url=https://us-central1-secretsanta-234fc.cloudfunctions.net/stanta
// https://api.telegram.org/bot1493834992:AAFQetYA4bgRS_frO1glgBIoSyZXTRuRywQ/getWebhookInfo


function loadPlayers(ctx, next) {
	return admin.firestore().collection('players').get()
		.then((snapshot) => {
			ctx.session.players = [...snapshot.docs.map(d => d.data())]
			if (next) return next()
			else
				return ctx.session.players
		})
		.catch(error => {
			logError(ctx, error)
			console.log('Error loadPlayers: ', error)
		})
}

function listPlayers(ctx) {
	if (ctx.session.players && ctx.session.players.length > 0) {
		ctx.session.players.filter(p => p.isParticipant).forEach(p => ctx.reply(`${p.first_name || ''}_${p.last_name || ''}`))
	} else {
		ctx.reply("–¢–∞–∞–∫... –ø–æ–¥ —Ä—É–∫–æ–π —Å–ø–∏—Å–∫–∞ –Ω–µ—Ç. –°—á–∞—Å —Å–±–µ–≥–∞—é –≤ –±–∞–∑—É...")
		loadPlayers(ctx, () => {
			listPlayers(ctx)
		})
	}
}

// just registration
function registerMe(ctx, next, isParticipant) {
	let from = ctx.update.callback_query
		? ctx.update.callback_query.from
		: ctx.message.from
	let currentPlayer = {
		id: from.id,
		first_name: from.first_name || '',
		last_name: from.last_name || '',
		username: from.username || '',
		isParticipant: isParticipant
	}
	let players = ctx.session.players

	if (players && players.length > 0) {
		let findResultIndex = players.findIndex(f => f.id === currentPlayer.id)
		if (findResultIndex !== -1) {
			players[findResultIndex].isParticipant = isParticipant
		} else {
			players.push(currentPlayer)
		}
		ctx.reply("–ì–æ—Ç–æ–≤–æ!")
	}

	firestore.collection('players').doc((from.id).toString()).set(currentPlayer)
		.then(function (res) {
			//console.log('registerMe Result', res)
			if (next) {
				return next()
			} else return res
		})
		.catch(function (error) {
			logError(ctx, error)
			console.log('Error in Register Me: ', error);
		});
}

// find target
// function findTargetPlayer(santaId, ctx, next) {
// 	return firestore.collection('players').doc(santaId).get().then(player => {
// 		if(next){
// 			next(player && player.target)
// 		}else return player && player.target
// 	}).catch(error => {
// 		logError(ctx, error)
// 		console.log('', error)
// 		if(next) next()
// 	});
// }

function whoIsMyTarget(ctx) {
	let target = {}
	let players = ctx.session.players
	//target = {id: "1173843019"} // to test on Angelina Chat ID
	if (players && players.length > 0) {
		let player = players.find(f => f.id === ctx.message.from.id)
		if (player && player.target) {
			sendTargetInfo(ctx,target)
		}else{
			ctx.reply('–ü–æ–∫–∞ –Ω–µ –∑–Ω–∞—é. –ò–≥—Ä–∞ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å. –ü–æ–¥–æ–∂–¥–µ–º –≤—Å–µ—Ö...')
		}
	} else {
		ctx.reply("–¢–∞–∞–∫... –ø–æ–¥ —Ä—É–∫–æ–π —Å–ø–∏—Å–∫–∞ –Ω–µ—Ç. –°—á–∞—Å —Å–±–µ–≥–∞—é –≤ –±–∞–∑—É...")
		loadPlayers(ctx, () => whoIsMyTarget(ctx))
		//findTargetPlayer(ctx.message.from.id.toString())
	}

	
}

function sendTargetInfo(ctx, target){
	if (target && target.id) {
		ctx.reply(`–¢—Å—Å—Å... –ï–≥–æ –∑–æ–≤—É—Ç: ${target.first_name || ''} ${target.last_name || ''} | ${target.username || ''} \n–¢–æ–ª—å–∫–æ –Ω–∏–∫–æ–º—É –Ω–µ –≥–æ–≤–æ—Ä–∏!`)
		ctx.reply('–•–º–º... –ò –≥–¥–µ-—Ç–æ –±—ã–ª–æ —Ñ–æ—Ç–æ... –ï—Å–ª–∏ –Ω–∞–π–¥—É, –ø—Ä–∏—à–ª—é.')
		showPhotosOfUser(ctx, ctx.message.from.id, target.id) // 
	}
}

// generation of pairs
async function generateTargets(ctx, next) {
	let db = await firestore.collection('players').get()
	ctx.session.players = db.docs.map(d => d.data())
	let players = ctx.session.players
	let participants = players // players.filter(p => p.isParticipant)
	if (participants.length > 3) {
		let targets = participants.map(p => {
			delete p.target
			return Object.assign({}, p);
		})

		participants.forEach(async p => {
			if (targets.length > 0) {
				let index = chooseTarget(targets, p)
				targets.splice(index, 1)

				await firestore.collection('players').doc(p.id.toString()).update({
					target: p.target
				})
			}
		})
	}
	participants.map(p => `[${p.id} ${p.first_name}_${p.last_name} -> ${p.target.id} ${p.target.first_name}_${p.target.last_name}]`).forEach(m => ctx.reply(m))
	console.log(participants.map(p => `${p.id} ${p.target.id}`)) // pairs
	if (next) return next()
	else return "ok"
}

function getRandomInt(min, max) {
	min = Math.ceil(min);
	max = Math.floor(max);
	return Math.floor(Math.random() * (max - min)) + min; //–ú–∞–∫—Å–∏–º—É–º –Ω–µ –≤–∫–ª—é—á–∞–µ—Ç—Å—è, –º–∏–Ω–∏–º—É–º –≤–∫–ª—é—á–∞–µ—Ç—Å—è
}

function chooseTarget(targets, p) {
	let index = getRandomInt(0, targets.length)
	let t = targets[index]

	if (p.id === t.id) {
		if (targets.length === 1) {
			console.log("Generation Error: we have bad pairs!!!")
			p.target = Object.assign({}, t);
			return index
		}
		return chooseTarget(targets, p)
	}

	// TODO: except logit improve
	if (p.except) {
		if (p.except.indexOf(t.id) === -1) {
			p.target = Object.assign({}, t);
			return index
		} else {
			let last = targets.map(tr => tr.id)
			let difference = last.filter(x => p.except && !p.except.includes(x));
			if (difference.length > 0) {
				return chooseTarget(targets, p)
			}
			else {
				console.log("Generation Error: we have bad pairs (excepts)!!!")
				p.target = Object.assign({}, t);
				return index
			}
		}
	} else {
		p.target = Object.assign({}, t);
		return index
	}

}

// tracing
const traceChatList = ['935549446' // eshymanovich chat 
]
const warningChatList = ['935549446' // eshymanovich chat 
]

function trace(ctx) {
	traceChatList.forEach(ch =>
		ctx.telegram.sendMessage(ch,
			`Just info: ${ctx.message.from.id}|${ctx.message.from.username}|${ctx.message.from.first_name}_${ctx.message.from.last_name} sent ${ctx.message.text}`
		)
	)
}

function logError(ctx, error) {
	warningChatList.forEach(ch => ctx.telegram.sendMessage(ch, error))
}

function showPhotos(ctx, next) {
	let players = ctx.session.players
	if (players && players.length > 0) {

		traceChatList.forEach(ch => {

			players.forEach(async p => {
				//ctx.telegram.sendMessage(ch, `Avas of ${p.first_name}`)
				let photo = await ctx.telegram.getUserProfilePhotos(p.id, 0, 0)
				photo.photos.forEach(arph => {

					if (arph && arph.length > 0) {
						console.log(`Avas of ${p.first_name}`, arph)
						arph.forEach(uph => {
							if (uph && uph.file_id && uph.width === 320) {
								console.log(`Avas of ${p.first_name}`, uph)
								ctx.telegram.sendPhoto(ch, uph.file_id, { caption: `Avas of ${p.first_name}` });
							}
						})
					}
				});
			})
		})
	} else {
		return loadPlayers(ctx, () => {
			showPhotos(ctx, next)
		})
	}
	if (next) return next()
	else return "ok"
}

function showPhotosOfUser(ctx, currentId, targetId) {
	ctx.telegram.getUserProfilePhotos(targetId, 0, 0).then((photo) => {
		if (photo && photo.photos) {
			photo.photos.forEach(arrayOfPhotos => {
				if (arrayOfPhotos && arrayOfPhotos.length > 0) {
					//console.log(`Avas of ${p.first_name}`, arph)
					arrayOfPhotos.forEach(uph => {
						if (uph && uph.file_id && uph.width === 160) {  // –¥—Ä—É–≥–∏–µ —Ä–∞–∑–º–µ—Ä—ã 320 160 –∏ 640
							//console.log(`Avas of ${p.first_name}`, uph)
							ctx.telegram.sendPhoto(currentId, uph.file_id, { caption: "–í–æ—Ç —Ñ–æ—Ç–æ" });
						}
					})
				}
			});
		}
		return photo
	}).catch((error) => {
		logError(ctx, error)
		console.log('Error in showPhotosOfUser: ', error);
		throw error
	});
}
